/**parse archive data */package {	import pdh.util.XMLLoader;	import flash.events.Event;	import flash.events.EventDispatcher;	public class AppData extends EventDispatcher	{		public static const LOADING : String = "app loading";		public static const LOADED : String = "app load";		private var xml_data : XMLLoader;				//namespace namespacexml = "asdfasdfasdfsadfsd";						//var office:Namespace = message.namespace("office");				public var rowdata :Vector.<ArchiveObject>;		function AppData(xmlfile : String)		{			xml_data = new XMLLoader(xmlfile);			xml_data.addEventListener(XMLLoader.LOADED, handleLoaded);		}		private function handleLoaded(e : Event):void		{			trace("[ThemeData] theme loaded! ");						//use namespace namespacexml;						var office:Namespace = xml_data.xml.namespace("office");			var table:Namespace = xml_data.xml.namespace("table");									// root node for excel spreadsheets			var rootdata:XMLList = xml_data.xml.office::body.table::table[0].table::table_row;												trace("total length = " + rootdata.length());						rowdata = parseRowData(rootdata);						dispatchEvent(new Event(LOADED));		}				private function parseRowData(val : XMLList) :  Vector.<ArchiveObject> 		{			trace("parsing " + val.length() + " entries");			var table:Namespace = xml_data.xml.namespace("table");			var text:Namespace = xml_data.xml.namespace("text");			var arr :Vector.<ArchiveObject> = new Vector.<ArchiveObject>();			// skip row 1, that is the headers			for (var i : int = 1;i < val.length(); i++) {				var rootNode:XMLList = val[i].table::table_cell;								var obj : ArchiveObject = new ArchiveObject();								trace(rootNode.length());				if (rootNode.length() == 0){					arr.push(obj);					continue;				}								try{									obj.types = rootNode[0].text::p.toString();					obj.id = rootNode[1].text::p.toString();					obj.filename = rootNode[2].text::p.toString();					obj.title = rootNode[3].text::p.toString();					obj.date = rootNode[4].text::p.toString();					obj.description = rootNode[5].text::p.toString();					obj.transcript = rootNode[6].text::p.toString();					obj.asset_details = rootNode[7].text::p.toString();					obj.exhibitions = rootNode[8].text::p.text();								} catch(e:Error){					trace(e);					continue;				}								trace(i + "pushing " + obj.exhibitions);				arr.push(obj);			}			return arr;		}					} // end class}// end package