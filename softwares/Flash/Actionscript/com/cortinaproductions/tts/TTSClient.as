package com.cortinaproductions.tts{	import flash.events.*;    import flash.net.XMLSocket;	import flash.utils.Timer;		public class TTSClient	{		private var ipstr:String = "127.0.0.1";		private var xmlSocket:XMLSocket = new XMLSocket();		private var connected:Boolean = false;		private var reconnectTimer:Timer = new Timer(30000, 1);		private static const PORT:Number = 8090;		function TTSClient()		{			addListeners();		}		private function addListeners():void 		{			xmlSocket.addEventListener(DataEvent.DATA, onIncomingData);			xmlSocket.addEventListener(Event.CLOSE, closeHandler);            xmlSocket.addEventListener(Event.CONNECT, connectHandler);            xmlSocket.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            xmlSocket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			reconnectTimer.addEventListener(TimerEvent.TIMER, handleReconnect);		}				private function handleReconnect(e:TimerEvent):void 		{			trace("** reconnecting to TTS Server **");			connect();		}				private function onIncomingData(event:DataEvent):void		{			trace("[" + event.type + "] " + event.data);		}		public function connect(val:String = null, port:Number = PORT)		{			if (val != null){				ipstr = val;			}			xmlSocket.connect(ipstr, port);			connected = true;		}		public function speak(val:String):void 		{			if (!connected){				connect();			}						trace("sending message: " + val);						xmlSocket.send(val);		}				private function ioErrorHandler(event:IOErrorEvent):void 		{            trace("ioErrorHandler: " + event);						connected = false;						trace("");			trace("Attempting to reconnect...");						// wait 30 seconds then reconnect			reconnectTimer.stop();			reconnectTimer.start();        }				private function closeHandler(event:Event):void 		{            trace("closeHandler: " + event);        }        private function connectHandler(event:Event):void 		{            trace("Successfully connected to server @ " + ipstr + ":" + PORT);        }        private function securityErrorHandler(event:SecurityErrorEvent):void 		{            trace("securityErrorHandler: " + event);        }			} // end class	}