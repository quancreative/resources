package com.cortinaproductions.video{	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	public class VideoPlayer extends Video	{		public var _flvPath : String;		public var _ns : NetStream;		private var _clipLength : Number;		private var _width:Number;		private var _height:Number;		public function VideoPlayer(flvpath : String, width : int = 320, height : int = 240)		{ 						super(width, height);			_width = width;			_height = height;						_clipLength = 0;			_flvPath = flvpath;						var nc : NetConnection = new NetConnection();			nc.connect(null);						_ns = new NetStream(nc);			_ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);						var meta : Object = new Object();			meta.onMetaData = metaDataHandler;						_ns.client = meta;			this.attachNetStream(_ns);							//connect media, go to first frame			_ns.play(_flvPath);			_ns.seek(0);			_ns.pause();		}		private function netStatusHandler(e : NetStatusEvent) : void		{			//trace(this + ", netStatusHandler: " + e.info.code);			switch(e.info.code)			{				case "NetConnection.Connect.Success":					break;					//trace("connect media");				case "NetStream.Play.StreamNotFound":					//trace("Unable to locate video: " + _url);					break;				case "NetStream.Buffer.Flush":					//done, stop and reset controls					dispatchEvent(new Event("MOVIE_DONE"));					break;			}		}		private function metaDataHandler(meta : Object) : void		{			//for (var a:String in meta){				//trace("meta."+a + " : " + meta[a]);			//}						if (_width/meta.width < _height/meta.height){				this.width = _width;				this.height = meta.height * (_width/meta.width);			} else {				this.height = _height;				this.width = meta.width * (_height/meta.height);			}									_clipLength = meta.duration;		}		public function resetMovie() : void 		{			_ns.seek(0);		}		public function playMovie() : void 		{			_ns.play(_flvPath);		}		public function killStream() : void 		{			_ns.close();		}		public function seekTo(pct : Number) : void 		{			var newPctPlayed : Number = pct * _clipLength;			_ns.seek(newPctPlayed);		}		public function getPercentLoaded() : Number 		{			var _pctloaded : Number = _ns.bytesLoaded / _ns.bytesTotal;			return _pctloaded;		}		public function getPlayhead() : Number 		{			var pctPlayed : Number = _ns.time / _clipLength;			return pctPlayed;		}	}}