package com.cortinaproductions.util{		/*	 * // child SWF uses parent domain definitions// if defined there, otherwise its ownvar childDefinitions:LoaderContext = new LoaderContext();childDefinitions.applicationDomain = new ApplicationDomain(ApplicationDomain.currentDomain);// child SWF adds its unique definitions to// parent SWF; both SWFs share the same domain// child SWFs definitions do not overwrite parentsvar addedDefinitions:LoaderContext = new LoaderContext();addedDefinitions.applicationDomain = ApplicationDomain.currentDomain;// child SWF domain is completely separate and// each SWF uses its own definitionsvar separateDefinitions:LoaderContext = new LoaderContext();separateDefinitions.applicationDomain = new ApplicationDomain();// set loader context in load()myLoader.load(request, separateDefinitions);	 * 	 */		import com.cortinaproductions.events.ExternalLoaderEvent;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	public class ExternalLoader extends Sprite	{		private var ldr				:Loader;		public var isLoaded			:Boolean = false;						function ExternalLoader(file:String ="")		{			if (file != "") load(file);		}							public function load(file:String):void		{			trace("[PhotoViewer] loading " + file);						if (ldr != null){				clear();			}			isLoaded = false;						//var context:LoaderContext = new LoaderContext();			//context.applicationDomain = new ApplicationDomain();						//var context:LoaderContext = new LoaderContext();			//context.applicationDomain = new ApplicationDomain(ApplicationDomain.currentDomain);						var context:LoaderContext = new LoaderContext( false, ApplicationDomain.currentDomain );						ldr = new Loader();				ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded, false, 0, true);			ldr.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, loading, false, 0, true);			ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			addChild(ldr);						var urlReq:URLRequest = new URLRequest(file);			ldr.load(urlReq,context);		}				private function loaded(e:Event):void 		{			isLoaded = true;			ldr.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaded);			ldr.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, loading);			ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);  			dispatchEvent(new ExternalLoaderEvent(ExternalLoaderEvent.LOADED));		}				private function onIOError(e:IOErrorEvent):void 		{			// do something		}				private function loading(e:ProgressEvent):void 		{			var pcent:Number = e.bytesLoaded / e.bytesTotal;				dispatchEvent(new ExternalLoaderEvent(ExternalLoaderEvent.LOADING, {value:pcent}));		}										public function getContent():*		{			return ldr.content;		}				public function get content():*		{			return ldr.content;		}						public function destroy():void		{			clear();		}								public function clear():void 		{			if (ldr != null){				if (contains(ldr))					removeChild(ldr);				ldr.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaded);				ldr.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, loading);				ldr.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);				ldr.unloadAndStop();				//ldr.unloadAndStop(true);				try{					ldr.unload();				} catch(err:Error){};				try{					ldr.close();				} catch(err:Error){};				ldr = null;			}			while(numChildren > 0){				removeChildAt(0);			}		}					} // end class	}