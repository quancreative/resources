/**	Displays either video or photos for exhibits*/package pdh.components{	import pdh.ui.UIObject;		import gs.TweenLite;	import gs.easing.*;		import pdh.video.VideoPlayerCombo;	import pdh.events.VideoPlayerEvent;		import flash.display.MovieClip;	import flash.display.Loader;	import flash.text.TextField	import flash.text.TextFieldAutoSize;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import pdh.util.PhotoViewer;	import pdh.events.PhotoViewerEvent;	import pdh.events.MediaViewerEvent	import pdh.graphics.Box;	import flash.display.Sprite;	import pdh.util.PhotoViewer;			public class MediaViewer extends UIObject	{		private var videoHasStatic	:Boolean = false;		private var photoContainer	:PhotoViewer		private var videoContainer	:VideoPlayerCombo;		private var bufferIcon		:MovieClip;		private var videoMode		:Boolean = false;		private var _autoHide		:Boolean = false;		private var staticVideoImage:PhotoViewer				public function MediaViewer(file:String = null, _w:Number = 500, _h:Number = 500)		{								init();			addListeners();			w = _w;			h = _h;			if (file != null){				loadMedia(file)			}		}						public function addListeners():void		{								}				private function init():void 		{						cacheAsBitmap = true;					bufferIcon = new BufferingBar()		}				public override  function hide():void 		{			TweenLite.to(this, .5, {alpha:0,  onComplete:hideDone});		}				private function hideDone():void 		{			this.visible = false;		}				public function set autoHideControls(val:Boolean):void 		{			if (videoContainer != null){				videoContainer.autoHide = val;			}			_autoHide = val;						}				public function controlsVisible(val:Boolean):void 		{			if (videoContainer != null){				videoContainer.useControls(val);			}		}				public override function show():void 		{			this.visible = true;			TweenLite.to(this, 1,{alpha:1});		}				public function setSize(_w, _h):void 		{			w = _w;			h = _h;									if (photoContainer != null){				photoContainer.setSize(w, h);			} 						if (videoContainer != null){				videoContainer.setSize(w, h);							}					}				public override function get width():Number		{			if (videoMode){				return videoContainer.width										} else {				return photoContainer.width			}					}				public override function get height():Number		{			if (videoMode){				return videoContainer.height				} else {				return photoContainer.height			}					}								public function loadMedia(val:String):void 		{						if (val.indexOf(".flv") != -1 || val.indexOf(".mov") != -1){				setVideo(val);			} else{				setPhoto(val);			}					}				public override function stop():void 		{			if (videoMode){				videoContainer.stopVideo();			}		}				public function setStaticImage(val:String):void 		{			if (videoContainer != null)						videoContainer.setStaticImage(val);									//videoHasStatic = true;			//staticVideoImage= new PhotoViewer(val)			//staticVideoImage.setSize(w, h);			//addChild(staticVideoImage);		}				public function removeStatic(w:Number = -1, h:Number = -1):void 		{			/*removeBufferIcon();			//staticVideoImage.visible = false;			if (videoHasStatic){								if (w != -1){					staticVideoImage.setSize(w, h);				}				TweenLite.to(staticVideoImage, 1, {autoAlpha:0})							}*/		}				private var playOnLoad:Boolean = true;		public function set autoPlay(val):void 		{			playOnLoad = val;		}				public function playVideo():void		{			if (!videoMode) return;			videoContainer.playVideo();		}				public function stopVideo():void		{			if (!videoMode) return;			videoContainer.stopVideo();		}					private var usesExternalPlayer:Boolean = false;		public function setVideo(val:String, externalPlayer:VideoPlayerCombo = null):void 		{			videoMode = true;						if (externalPlayer == null){				videoContainer = new VideoPlayerComponent();			} else {				usesExternalPlayer = true;				videoContainer = externalPlayer;			}			//if(!playOnLoad){				//videoContainer.playOnLoad = false;			//}			videoContainer.addEventListener(VideoPlayerEvent.READY, handleVideoReady, false, 0, true);			videoContainer.addEventListener(VideoPlayerEvent.DONE, handleVideoDone, false, 0, true);			videoContainer.addEventListener(VideoPlayerEvent.PLAY, handleVideoPlay, false, 0, true);			videoContainer.autoHide = _autoHide;			videoContainer.loadVideo(val);			videoContainer.setSize(w, h);						addChild(videoContainer);						videoContainer.visible = false;		}				private function handleVideoReady(e:VideoPlayerEvent):void 		{			videoContainer.visible = true;			//dispatchEvent(new MediaViewerEvent(MediaViewerEvent.LOADED))			dispatchEvent(new MediaViewerEvent(MediaViewerEvent.VISIBLE))		}				private function handleVideoDone(e:VideoPlayerEvent):void 		{			//TweenLite.to(staticVideoImage, 1, {autoAlpha:1})				}				private function handleVideoPlay(e:VideoPlayerEvent):void 		{			//removeStatic();			//TweenLite.to(staticVideoImage, 1, {autoAlpha:1})				}						public function moveControlsTo(newcontainer:Sprite):void 		{			if (videoContainer != null){				videoContainer.autoHide = false;				videoContainer.moveControlsTo(newcontainer)			}		}				private function setPhoto(val:String):void 		{			videoMode = false;						photoContainer = new PhotoViewer(val);			photoContainer.fadeTime = 1			photoContainer.addEventListener(PhotoViewerEvent.VISIBLE, imagevis, false, 0, true);			photoContainer.addEventListener(PhotoViewerEvent.LOADED, imageLoaded, false, 0, true);			addChild(photoContainer);			photoContainer.setSize(w,h);			setupBufferIcon();					}				private function setupBufferIcon():void		{						bufferIcon.x = (w/2)			bufferIcon.y = (h/2)						TweenLite.delayedCall(1, addBufferIcon)		}				private function removeBufferIcon():void 		{			TweenLite.killDelayedCallsTo(addBufferIcon);			if (contains(bufferIcon))				removeChild(bufferIcon);			//if (photoContainer.contains(bufferIcon))				//photoContainer.removeChild(bufferIcon);		}				private function addBufferIcon():void 		{			//if (videoMode){				addChild(bufferIcon);			//} else {				//photoContainer.addChild(bufferIcon);			//}					}				// stop any processess running and clear any references 		// which might cause this object not to be deleted		public override function destroy():void 		{			TweenLite.killDelayedCallsTo(staticVideoImage);			TweenLite.killTweensOf();			TweenLite.killDelayedCallsTo(addBufferIcon);			if (photoContainer != null){				photoContainer.removeEventListener(PhotoViewerEvent.VISIBLE, imagevis);				photoContainer.removeEventListener(PhotoViewerEvent.LOADED, imageLoaded);								photoContainer.destroy();			} 						if (videoContainer != null){				videoContainer.removeEventListener(VideoPlayerEvent.DONE, handleVideoDone);				videoContainer.removeEventListener(VideoPlayerEvent.PLAY, handleVideoPlay);				videoContainer.removeEventListener(VideoPlayerEvent.READY, handleVideoReady);				if (!usesExternalPlayer){					videoContainer.destroy();				} 				videoContainer = null;			}						while(numChildren > 0){				removeChildAt(0);			}		}						//------------------------------------------------------------------------------HANDLERS										 private function imageLoaded(evt:Event):void 		 {																					dispatchEvent(new MediaViewerEvent(MediaViewerEvent.LOADED))				TweenLite.killDelayedCallsTo(addBufferIcon)			removeBufferIcon()			     	 }		 		  private function imagevis(evt:Event):void 		 {																					dispatchEvent(new MediaViewerEvent(MediaViewerEvent.VISIBLE))			     	 }			} // end class} // end package