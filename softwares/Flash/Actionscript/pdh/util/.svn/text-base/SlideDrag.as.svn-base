package pdh.util{	import flash.display.*;	import flash.events.*;	import gs.*;	import pdh.events.*;	public class SlideDrag extends EventDispatcher	{				private var startX : Number;		private var startY : Number;				private var target:Sprite;				private var BOTTOM_Y : int;				private var horzTolerance  :int = 100;		function SlideDrag(targ:Sprite)		{			target = targ;			target.addEventListener(MouseEvent.MOUSE_DOWN, handleThisClick, false, 0, true);								}				public function set dragTolerance(val:Number):void 		{			horzTolerance = val;		}		public function set bottomY(val:Number):void		{			BOTTOM_Y = val;		}		private function handleThisClick(e : MouseEvent):void		{			startX = target.mouseX+ target.x;			startY = target.mouseY+ target.y;						TweenMax.killTweensOf(target);						//target.mouseChildren = false;			trace("starty ---> " + startY)						target.stage.addEventListener(MouseEvent.MOUSE_MOVE, handleThisMOVE);			target.stage.addEventListener(MouseEvent.MOUSE_UP, handleThisRelease);		}		private function handleThisMOVE(e : MouseEvent):void		{			var touchX:Number = target.stage.mouseX//e.localX// + target.x;			var touchY:Number = target.stage.mouseY//e.localY// + target.y;									trace("moveY ---> " + touchY);						// calculate new distance to move			var distanceX : Number = (touchX - startX);			var distanceY : Number = (touchY - startY);						if(distanceX > horzTolerance){				trace("drag right")				dispatchEvent(new SlideDragEvent(SlideDragEvent.DRAG_RIGHT));			} else if (distanceX < -horzTolerance){				trace("drag left")				dispatchEvent(new SlideDragEvent(SlideDragEvent.DRAG_LEFT));			}			// convert to int			var targX:int = int(target.x + distanceX);			var targY:int = int(target.y + distanceY);			// limit the range			if (targY > 0) {				targY = 0;			}			else if (targY < -BOTTOM_Y) {				targY =  -  BOTTOM_Y;			}			TweenMax.to(target, 1, {y:targY});		}		private function handleThisRelease(e : Event):void		{			target.mouseChildren = true;			target.stage.removeEventListener(MouseEvent.MOUSE_UP, handleThisRelease);			target.stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleThisMOVE);		}		public function stopDragging():void		{			TweenMax.killTweensOf(target);			target.mouseChildren = true;			target.stage.removeEventListener(MouseEvent.MOUSE_UP, handleThisRelease);			target.stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleThisMOVE);		}						public function destroy()		{			TweenMax.killTweensOf(target);			target.removeEventListener(MouseEvent.MOUSE_DOWN, handleThisClick);		}	}}