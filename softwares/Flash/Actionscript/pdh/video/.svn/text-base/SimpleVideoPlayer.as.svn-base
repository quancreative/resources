package pdh.video{		import gs.*;	import flash.display.*;    import flash.events.*;    import flash.media.Video;    import flash.net.NetConnection;    import flash.net.NetStream;	import pdh.events.*;	public class SimpleVideoPlayer extends Sprite {		// net connection object for net stream		var ncConnection			:NetConnection;		// net stream object		var nsStream				:NetStream;				private var totalSeconds	:Number = 45;		// time to buffer for the video in sec.		const BUFFER_TIME			:Number = 8;				public var isPlaying:Boolean = false;				var vid:Video;						function SimpleVideoPlayer(w:Number, h:Number):void		{			init(w,h);		}		private function init(w:Number, h:Number):void {						var customClient:Object = new Object();			customClient.onMetaData = metaDataHandler;						vid = new Video(w,h);			addChild(vid); 						// create a new net connection, add event listener and connect			// to null because we don't have a media server			ncConnection = new NetConnection();						ncConnection.connect(null);			// create a new netstream with the net connection, add event			// listener, set client to this for handling meta data and			// set the buffer time to the value from the constant			nsStream=new NetStream(ncConnection);								nsStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			nsStream.client = customClient;			nsStream.bufferTime=BUFFER_TIME;			// attach net stream to video object on the stage			vid.attachNetStream(nsStream);						// set the smoothing value from the constant			vid.smoothing = true;		}				private function netStatusHandler(e : NetStatusEvent) : void		{			//trace(this + ", netStatusHandler: " + e.info.code);			switch(e.info.code)			{								case "NetStream.Play.Stop":					if (isPlaying)						dispatchEvent(new VideoPlayerEvent(VideoPlayerEvent.DONE, null, true));					break;							}		}						public function setSmoothing(val:Boolean):void 		{			vid.smoothing = val;		}				public function seek(val:Number):void 		{			nsStream.seek(val*totalSeconds);		}				public function load(val:String):void		{			nsStream.play(val);			TweenMax.delayedCall(1, pause);		}				public function pause():void 		{			isPlaying = false;			nsStream.pause();			stopTimeDispatcher();		}				public function play():void 		{			isPlaying = true;			nsStream.resume();			stopTimeDispatcher();			startTimeDispatcher();				}						private function startTimeDispatcher():void 		{			addEventListener(Event.ENTER_FRAME, doFrame);		}				private function stopTimeDispatcher():void 		{			removeEventListener(Event.ENTER_FRAME, doFrame);		}				private function doFrame(e:Event):void		{			//trace(this +  " : " +  nsStream.time)			dispatchEvent(new VideoPlayerEvent(VideoPlayerEvent.UPDATE, {seconds:nsStream.time}, true));		}				private function asyncErrorHandler(e:Event):void 		{					}				function metaDataHandler(infoObject:Object):void 		{								}					}}